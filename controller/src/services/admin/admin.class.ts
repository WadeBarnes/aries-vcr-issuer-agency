import { Conflict } from '@feathersjs/errors';
import { NullableId, Paginated, Params } from '@feathersjs/feathers';
import {
  ServiceSwaggerAddon,
  ServiceSwaggerOptions,
} from 'feathers-swagger/types';
import { v4 as uuidv4 } from 'uuid';
import { Application } from '../../declarations';
import logger from '../../logger';
import { BaseIssuerProfile } from '../../models/issuer-model';

import { hashSync } from 'bcrypt';

interface Data extends BaseIssuerProfile {}

interface ServiceOptions {}

export class Admin implements ServiceSwaggerAddon {
  app: Application;
  options: ServiceSwaggerOptions;

  constructor(options: ServiceOptions = {}, app: Application) {
    this.options = options;
    this.app = app;
  }

  //eslint-disable-next-line @typescript-eslint/no-unused-vars
  async create(data: Data, params?: Params): Promise<any> {
    const existingUsers = (await this.app.service('issuer-model').find({
      query: { name: data.name },
      collation: { locale: 'en', strength: 1 },
    })) as Paginated<Data>;

    if (existingUsers.data.length > 0) {
      return new Conflict(
        `A user with name '${data.name}' has already been created`
      );
    }

    const issuerKey = uuidv4();
    const saltedKey = hashSync(issuerKey, 10);

    const result = await this.app.service('issuer-model').create({
      name: data.name,
      'api-key': saltedKey,
    } as BaseIssuerProfile);

    logger.debug(`Created new profile with name ${data.name}`);

    return Object.assign({}, result, { 'api-key': issuerKey });
  }

  //eslint-disable-next-line @typescript-eslint/no-unused-vars
  async remove(id: NullableId, params: Params): Promise<any> {
    await this.app.service('issuer-model').remove(id);
    return {};
  }

  docs: ServiceSwaggerOptions = {
    description:
      'Creation and deletion of issuer profiles, used by Agency administrators.',
    idType: 'string',
    refs: {
      createResponse: 'admin_create_response',
      removeResponse: 'empty_body',
    },
    definitions: {
      admin_create_response: {
        title: 'admin',
        type: 'object',
        required: ['name', 'api-key'],
        properties: {
          name: {
            type: 'string',
            description: 'The name of the issuer',
          },
          'api-key': {
            type: 'string',
            description: 'The new api-key generated for this issuer.',
          },
        },
      },
      empty_body: {
        title: 'empty',
        type: 'object',
        required: [],
        properties: {},
      },
    },
    securities: ['all'],
  };

  model = {
    description: 'Base Issuer Model',
    type: 'object',
    required: ['name'],
    properties: {
      id: {
        type: 'string',
        description: 'The issuer identifier generated by the system',
        readOnly: true,
      },
      name: {
        type: 'string',
        description: 'The name of the issuer',
      },
    },
  };
}
